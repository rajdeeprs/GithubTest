package com.capgroup.drpp.providers;
 
import org.opensaml.core.xml.XMLObject;
import org.opensaml.saml.saml2.core.Assertion;
import org.opensaml.security.x509.BasicX509Credential;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;
 
import com.capgroup.drpp.exceptions.SamlAuthException;
import com.capgroup.drpp.models.User;
import com.capgroup.drpp.services.SamlAuthService;
import com.capgroup.drpp.services.SamlParserService;
import com.capgroup.drpp.tokens.SamlAuthToken;
 
import lombok.extern.slf4j.Slf4j;
 
import java.io.FileNotFoundException;
import java.security.cert.CertificateException;
import java.util.List;
 
import static org.apache.commons.lang3.StringUtils.isBlank;
 
@Slf4j
@Component
public class SamlAuthProvider implements AuthenticationProvider {
  private SamlAuthService samlAuthService;
  private SamlParserService samlParserService;
 
  @Autowired
  public SamlAuthProvider(SamlAuthService samlAuthService, SamlParserService samlParserService) {
    this.samlAuthService = samlAuthService;
    this.samlParserService = samlParserService;
  }
 
  @Override
  public Authentication authenticate(Authentication authentication) throws AuthenticationException {
    try {
      String saml = (String) authentication.getPrincipal();
      if (isBlank(saml)) {
        throw new SamlAuthException(SamlAuthException.missingSaml);
      }
 
      // get assertion
      XMLObject xmlObject = samlParserService.getXMLObject(saml);
      Assertion assertion = samlParserService.getAssertion(xmlObject);
 
      // validate assertion
      samlAuthService.validateAssertionIssuer(assertion);
      samlAuthService.validateAssertionSignature(assertion);
      BasicX509Credential credential =
          samlAuthService.getCredential(assertion.getIssuer().getValue());
      samlAuthService.validateAssertionCertificate(assertion, credential);
      samlAuthService.validateAssertionCondition(assertion);
 
      User user = samlAuthService.getUser(assertion);
      List<GrantedAuthority> authorities = samlAuthService.getAuthorities(user);
 
      return new SamlAuthToken(user, null, authorities);
    } catch (SamlAuthException ex) {
      log.error("Saml authentication exception: " + ex.getMessage());
      throw new BadCredentialsException(ex.getMessage());
    } catch (FileNotFoundException ex) {
      log.error("Saml X509 credential file not found: " + ex.getMessage());
      throw new BadCredentialsException(ex.getMessage());
    } catch (CertificateException ex) {
      log.error("Saml certificate exception occured: " + ex.getMessage());
      throw new BadCredentialsException(ex.getMessage());
    } catch (Exception ex) {
      log.error("Unexpected exception occured while authenticating saml: " + ex.getMessage());
      throw new BadCredentialsException(ex.getMessage());
    }
  }
 
  @Override
  public boolean supports(Class<?> authentication) {
    return authentication.equals(SamlAuthToken.class);
  }
 
}
 
****************************************************************************************
 
 
package com.capgroup.drpp.providers;
 
import com.auth0.jwt.interfaces.DecodedJWT;
import com.capgroup.drpp.models.User;
import com.capgroup.drpp.services.JwtService;
import com.capgroup.drpp.token.JwtToken;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;
 
import java.util.Collection;
 
@Component
public class JwtProvider implements AuthenticationProvider {
 
  @Autowired
  private JwtService jwtService;
 
  @Override
  public Authentication authenticate(Authentication authentication) throws AuthenticationException {
    try {
      DecodedJWT decodedJWT = jwtService.verify((String) authentication.getPrincipal());
      User user = jwtService.getUser(decodedJWT);
      Collection<? extends GrantedAuthority> authorities = jwtService.getAuthorities(user);
      return new JwtToken(user, null, authorities);
    } catch (Exception e) {
      throw new BadCredentialsException("JWT is missing or invalid", e);
    }
  }
 
  @Override
  public boolean supports(Class<?> authentication) {
    return authentication.equals(JwtToken.class);
  }
 
}
 

     

Advertisement

Outdoor Kitchen Cabinets Might Totally Surprise You

Outdoor Kitchen | Search Ads
Add Comment
Please, Sign In to add comment
Advertisement

Outdoor Kitchen Cabinets Might Totally Surprise You

Outdoor Kitchen | Search Ads
Public Pastes

    Untitled
    Python | 22 min ago | 27.31 KB
    Untitled
    Java | 32 min ago | 1.34 KB
    MoveToTarget
    C# | 1 hour ago | 0.41 KB

